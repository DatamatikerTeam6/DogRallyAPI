// <auto-generated />
using System;
using DogRallyAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DogRallyAPI.Migrations
{
    [DbContext(typeof(DogRallyContext))]
    [Migration("20240506092127_TrackExerciseView")]
    partial class TrackExerciseView
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DogRallyAPI.Models.Exercise", b =>
                {
                    b.Property<int>("ExerciseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseID"));

                    b.Property<int>("ExerciseClassEnumID")
                        .HasColumnType("int");

                    b.Property<string>("ExerciseIllustrationPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExerciseMovementEnumID")
                        .HasColumnType("int");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ExercisePositionX")
                        .HasColumnType("float");

                    b.Property<double>("ExercisePositionY")
                        .HasColumnType("float");

                    b.Property<bool>("ExerciseSideShift")
                        .HasColumnType("bit");

                    b.Property<int>("ExerciseSignNumber")
                        .HasColumnType("int");

                    b.HasKey("ExerciseID");

                    b.ToTable("Exercise", (string)null);
                });

            modelBuilder.Entity("DogRallyAPI.Models.Track", b =>
                {
                    b.Property<int>("TrackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackID"));

                    b.Property<DateTime>("TrackDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrackID");

                    b.ToTable("Track", (string)null);
                });

            modelBuilder.Entity("DogRallyAPI.Models.TrackExercise", b =>
                {
                    b.Property<int>("TrackID")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseID")
                        .HasColumnType("int");

                    b.Property<double>("TrackExercisePositionX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("TrackExercisePositionY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int?>("TrackID1")
                        .HasColumnType("int");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrackID", "ExerciseID");

                    b.HasIndex("ExerciseID");

                    b.HasIndex("TrackID1");

                    b.ToTable("TrackExercise", (string)null);

                    b.ToView("TrackExerciseView", (string)null);
                });

            modelBuilder.Entity("DogRallyAPI.Models.TrackExercise", b =>
                {
                    b.HasOne("DogRallyAPI.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExerciseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogRallyAPI.Models.Track", null)
                        .WithMany()
                        .HasForeignKey("TrackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogRallyAPI.Models.Track", null)
                        .WithMany("TrackExercises")
                        .HasForeignKey("TrackID1");
                });

            modelBuilder.Entity("DogRallyAPI.Models.Track", b =>
                {
                    b.Navigation("TrackExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
